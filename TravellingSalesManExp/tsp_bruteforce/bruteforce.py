from sys import maxsize
from itertools import permutations
import math
import time

# implementation of traveling Salesman Problem
def travellingSalesmanProblem(graph, s):

	V=len(graph)
	# store all vertex apart from source vertex
	vertex = []
	for i in range(V):
		if i != s:
			vertex.append(i)

	# store minimum weight Hamiltonian Cycle
	min_path = maxsize
	next_permutation=permutations(vertex)

	bestpath=[]

	for i in next_permutation:

		# store current Path weight(cost)
		current_pathweight = 0

		# compute current path weight
		k = s
		for j in i:
			current_pathweight += graph[k][j]
			k = j
		current_pathweight += graph[k][s]

		# update minimum
		if current_pathweight<min_path:
			min_path=current_pathweight

			temp=list(i)
			temp.insert(0, s)
			temp.append(s)

			bestpath=temp


		
	return bestpath, min_path


# Driver Code
if __name__ == "__main__":
	s = 0
	
	#basic1
	#basic1=[[0,1,2,1,1],[1,0,1,2,1],[2,1,0,1,1],[1,2,1,0,1],[1,1,1,1,0]]

	#basic2
	#basic2=[[0, 10, 15, 20], [10, 0, 35, 25],[15, 35, 0, 30], [20, 25, 30, 0]]

	#5 points
	data1=[[0, 91, 72, 52, 28], [91, 0, 70, 93, 112], [72, 70, 0, 34, 75], [52, 93, 34, 0, 44], [28, 112, 75, 44, 0]]

	#10 points
	data2=[[0, 37, 32, 24, 31, 26, 41, 26, 34, 34], [37, 0, 69, 13, 57, 63, 49, 59, 48, 54], [32, 69, 0, 56, 24, 8, 48, 33, 39, 34], [24, 13, 56, 0, 47, 50, 44, 45, 41, 46], [31, 57, 24, 47, 0, 26, 24, 48, 16, 9], [26, 63, 8, 50, 26, 0, 48, 25, 40, 35], [41, 49, 48, 44, 24, 48, 0, 65, 8, 14], [26, 59, 33, 45, 48, 25, 65, 0, 57, 55], [34, 48, 39, 41, 16, 40, 8, 57, 0, 7], [34, 54, 34, 46, 9, 35, 14, 55, 7, 0]]

	#15 points
	data3=[[0, 39, 43, 44, 11, 55, 23, 36, 1, 14, 65, 38, 35, 31, 22], [39, 0, 59, 56, 46, 94, 62, 8, 39, 28, 105, 67, 44, 60, 55], [43, 59, 0, 88, 53, 67, 49, 51, 45, 38, 78, 78, 15, 19, 28], [44, 56, 88, 0, 37, 77, 52, 60, 43, 52, 83, 27, 78, 75, 65], [11, 46, 53, 37, 0, 50, 19, 45, 10, 24, 59, 27, 46, 38, 28], [55, 94, 67, 77, 50, 0, 32, 91, 55, 67, 11, 51, 71, 48, 44], [23, 62, 49, 52, 19, 32, 0, 59, 23, 36, 42, 32, 47, 31, 21], [36, 8, 51, 60, 45, 91, 59, 0, 36, 23, 101, 68, 36, 53, 50], [1, 39, 45, 43, 10, 55, 23, 36, 0, 14, 65, 37, 36, 33, 23], [14, 28, 38, 52, 24, 67, 36, 23, 14, 0, 78, 51, 26, 33, 27], [65, 105, 78, 83, 59, 11, 42, 101, 65, 78, 0, 56, 83, 60, 55], [38, 67, 78, 27, 27, 51, 32, 68, 37, 51, 56, 0, 72, 62, 51], [35, 44, 15, 78, 46, 71, 47, 36, 36, 26, 83, 72, 0, 24, 28], [31, 60, 19, 75, 38, 48, 31, 53, 33, 33, 60, 62, 24, 0, 10], [22, 55, 28, 65, 28, 44, 21, 50, 23, 27, 55, 51, 28, 10, 0]]

	##################################
	#6
	data6=[[0, 62, 65, 68, 34, 53], [62, 0, 106, 116, 70, 31], [65, 106, 0, 15, 36, 78], [68, 116, 15, 0, 45, 89], [34, 70, 36, 45, 0, 45], [53, 31, 78, 89, 45, 0]]
	#############################
	#7
	data7=[[0, 70, 38, 74, 65, 38, 37], [70, 0, 97, 77, 12, 75, 70], [38, 97, 0, 63, 96, 28, 31], [74, 77, 63, 0, 84, 38, 37], [65, 12, 96, 84, 0, 76, 72], [38, 75, 28, 38, 76, 0, 4], [37, 70, 31, 37, 72, 4, 0]]

	############################
	#8
	data8=[[0, 18, 29, 69, 52, 67, 81, 78], [18, 0, 15, 59, 36, 61, 63, 70], [29, 15, 0, 43, 23, 46, 54, 55], [69, 59, 43, 0, 32, 14, 53, 14], [52, 36, 23, 32, 0, 42, 33, 46], [67, 61, 46, 14, 42, 0, 67, 11], [81, 63, 54, 53, 33, 67, 0, 66], [78, 70, 55, 14, 46, 11, 66, 0]]

	############################3
	#9
	data9=[[0, 50, 51, 5, 45, 63, 32, 48, 32], [50, 0, 69, 52, 36, 13, 62, 37, 29], [51, 69, 0, 56, 88, 79, 20, 35, 73], [5, 52, 56, 0, 44, 65, 37, 53, 31], [45, 36, 88, 44, 0, 43, 73, 66, 15], [63, 13, 79, 65, 43, 0, 74, 45, 39], [32, 62, 20, 37, 73, 74, 0, 38, 58], [48, 37, 35, 53, 66, 45, 38, 0, 52], [32, 29, 73, 31, 15, 39, 58, 52, 0]]






	starttime=time.time()
	pp,cc=travellingSalesmanProblem(data2, s)
	endtime=time.time()

	spend=endtime-starttime


	print("Path for the problem: {}".format(pp))

	print("Traveling cost: {}".format(cc))

	print("Running time: {}".format(spend))





